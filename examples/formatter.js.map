{"version":3,"sources":["webpack:///./examples/formatter.js"],"names":["getSum","str","total","split","forEach","c","num","Number","isNaN","App","state","value","margin","replace","width","setState","match","React","Component","ReactDOM","render","document","getElementById"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA,SAASA,MAAT,CAAgBC,GAAhB,EAAqB;AACnB,MAAIC,QAAQ,CAAZ;AACAD,MAAIE,KAAJ,CAAU,EAAV,EAAcC,OAAd,CAAsB,UAACC,CAAD,EAAO;AAC3B,QAAMC,MAAMC,OAAOF,CAAP,CAAZ;;AAEA,QAAI,CAACG,MAAMF,GAAN,CAAL,EAAiB;AACfJ,eAASI,GAAT;AACD;AACF,GAND;;AAQA,SAAOJ,KAAP;AACD;;IAEKO,G;;;;;;;;;;;;;;gLACJC,K,GAAQ;AACNC,aAAO;AADD,K;;;;;6BAIC;AAAA;;AACP,aACE;AAAA;AAAA,UAAK,OAAO,EAAEC,QAAQ,EAAV,EAAZ;AACE,oEAAC,gEAAD;AACE,wBAAW,gEADb;AAEE,wBAAc,IAFhB;AAGE,qBAAW;AAAA,mBAAS,QAAKD,KAAL,EAAaE,OAAb,CAAqB,uBAArB,EAA8C,GAA9C,CAAT;AAAA;AAHb,UADF;AAME,oEAAC,gEAAD;AACE,wBAAW,kEADb;AAEE,wBAAc,GAFhB;AAGE,qBAAW;AAAA,mBAAYF,KAAZ;AAAA,WAHb;AAIE,kBAAQ;AAAA,mBAASA,MAAME,OAAN,CAAc,GAAd,EAAmB,EAAnB,CAAT;AAAA;AAJV,UANF;AAYE,oEAAC,gEAAD;AACE,wBAAW,qEADb;AAEE,iBAAO,EAAEC,OAAO,GAAT,EAFT;AAGE,qBAAW;AAAA,mBACT,MAAGH,KAAH,EAAWE,OAAX,CAAmB,uBAAnB,EAA4C,GAA5C,CADS;AAAA;AAHb,UAZF;AAoBE;AAAA;AAAA;AACE;AAAA;AAAA;AAAA;AAAA,WADF;AAEE,sEAAC,gEAAD;AACE,0BAAW,uDADb;AAEE,mBAAO,KAAKH,KAAL,CAAWC,KAFpB;AAGE,sBAAU,kBAACA,KAAD,EAAW;AAAE,qBAAKI,QAAL,CAAc,EAAEJ,YAAF,EAAd;AAA2B,aAHpD;AAIE,uBAAW;AAAA,qBAAS,QAAKA,KAAL,EAAaE,OAAb,CAAqB,uBAArB,EAA8C,GAA9C,CAAT;AAAA;AAJb;AAFF,SApBF;AA8BE;AAAA;AAAA;AACE;AAAA;AAAA;AAAA;AAAA,WADF;AAEE,sEAAC,gEAAD;AACE,0BAAW,4DADb;AAEE,0BAAc,IAFhB;AAGE,uBAAW;AAAA,4BAAcF,KAAd,WAAyBX,OAAOW,KAAP,CAAzB;AAAA,aAHb;AAIE,oBAAQ;AAAA,qBAAS,CAACA,MAAMK,KAAN,CAAY,kBAAZ,KAAmC,EAApC,EAAwC,CAAxC,CAAT;AAAA;AAJV;AAFF;AA9BF,OADF;AA0CD;;;;EAhDeC,6CAAKA,CAACC,S;;AAmDxBC,iDAAQA,CAACC,MAAT,CAAgB,4DAAC,GAAD,OAAhB,EAAyBC,SAASC,cAAT,CAAwB,iBAAxB,CAAzB,E","file":"examples/formatter.js","sourcesContent":["/* eslint no-console:0 */\nimport 'rc-input-number/assets/index.less';\nimport InputNumber from 'rc-input-number';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction getSum(str) {\n  let total = 0;\n  str.split('').forEach((c) => {\n    const num = Number(c);\n\n    if (!isNaN(num)) {\n      total += num;\n    }\n  });\n\n  return total;\n}\n\nclass App extends React.Component {\n  state = {\n    value: 1000,\n  };\n\n  render() {\n    return (\n      <div style={{ margin: 10 }}>\n        <InputNumber\n          aria-label=\"Controlled number input demonstrating a custom currency format\"\n          defaultValue={1000}\n          formatter={value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n        />\n        <InputNumber\n          aria-label=\"Controlled number input demonstrating a custom percentage format\"\n          defaultValue={100}\n          formatter={value => `${value}%`}\n          parser={value => value.replace('%', '')}\n        />\n        <InputNumber\n          aria-label=\"Controlled number input demonstrating a custom format to add commas\"\n          style={{ width: 100 }}\n          formatter={value =>\n            `${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n          }\n        />\n\n        <div>\n          <h1>In Control</h1>\n          <InputNumber\n            aria-label=\"Controlled number input demonstrating a custom format\"\n            value={this.state.value}\n            onChange={(value) => { this.setState({ value }); }}\n            formatter={value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n          />\n        </div>\n\n        <div>\n          <h1>Strange Format</h1>\n          <InputNumber\n            aria-label=\"Number input example demonstrating a strange custom format\"\n            defaultValue={1000}\n            formatter={value => `$ ${value} - ${getSum(value)}`}\n            parser={value => (value.match(/^\\$ ([\\d.]*) .*$/) || [])[1]}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('__react-content'));\n\n\n\n// WEBPACK FOOTER //\n// ./examples/formatter.js"],"sourceRoot":""}